#version 450
#extension GL_ARB_shading_language_include : enable

// NOTE: just one big huge fat workgroup
layout(local_size_x = 512) in;

#include "common/buffers.glsli"
#include "common/scans.glsli"


shared int block_offsets[gl_WorkGroupSize.x + 1];
shared int total_sum;

// TODO: make this into a couple macros or something
void main() {
	const BlockPartitionDesc bpd = create_block_partition_desc(gl_WorkGroupSize.x, B_contour_desc.num_contour_edges);
	const BlockDesc bd = create_block_desc(bpd, gl_LocalInvocationID.x);

	const bool is_participating_stage_0 = bd.block_idx < bpd.num_blocks;
	const bool is_participating_stage_1 = gl_LocalInvocationID.x == 0;
	const bool is_participating_stage_2 = bd.block_idx < bpd.num_blocks;

	if (is_participating_stage_0) {
		int block_sum = 0;
		for (uint element_idx = bd.first_element_idx; element_idx <= bd.final_element_idx; ++element_idx) {
			B_contour_edge_to_contour_fragment.data[element_idx].first_fragment_idx = block_sum;
			block_sum += int(B_contour_edge_to_contour_fragment.data[element_idx].num_fragments);
		}
		block_offsets[bd.block_idx] = block_sum;
	}
	barrier();
	if (is_participating_stage_1) {
		total_sum = 0;
		for (int block_idx = 0; block_idx < bpd.num_blocks; ++block_idx) {
			const int this_block_sum = block_offsets[block_idx];
			block_offsets[block_idx] = total_sum;
			total_sum += this_block_sum;
		}
		B_contour_desc.num_contour_fragments = total_sum;
	}
	barrier();
	if (is_participating_stage_2) {
		const int block_offset = block_offsets[bd.block_idx];
		for (uint element_idx = bd.first_element_idx; element_idx <= bd.final_element_idx; ++element_idx) {
			B_contour_edge_to_contour_fragment.data[element_idx].first_fragment_idx += block_offset;
		}
	}
	barrier();
}
