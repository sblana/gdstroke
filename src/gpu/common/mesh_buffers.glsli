#ifndef MESH_BUFFERS_GLSLI
#define MESH_BUFFERS_GLSLI

#include "common/sanity.glsli"

layout(set = 2, binding = 0, std430) RESTRICT readonly buffer MeshDescBuffer {
	int num_vertices;
	int num_edges;
	int num_faces;
	int pad;
	mat4 model_to_world;
} B_mesh_desc;


// w component for padding
layout(set = 2, binding = 1, std430) RESTRICT readonly buffer VertexBuffer {
	vec4 position[];
} B_vertex;


layout(set = 2, binding = 2, std430) RESTRICT readonly buffer EdgeToVertexBuffer {
	ivec2 vertex_idxs[];
} B_edge_to_vertex;

layout(set = 2, binding = 3, std430) RESTRICT readonly buffer EdgeToFaceBuffer {
	ivec2 face_idxs[];
} B_edge_to_face;

layout(set = 2, binding = 4, std430) RESTRICT readonly buffer EdgeIsConcaveBuffer {
	bool concave[];
} B_edge_is_concave;

layout(set = 2, binding = 5, std430) RESTRICT buffer EdgeIsContourBuffer {
	bool contour[];
} B_edge_is_contour;

layout(set = 2, binding = 6, std430) RESTRICT buffer EdgeToContourEdgeBuffer {
	int idx[];
} B_edge_to_contour_edge;


layout(set = 2, binding = 7, std430) RESTRICT readonly buffer FaceToVertexBuffer {
	ivec4 idxs[];
} B_face_to_vertex;

// w component for padding
layout(set = 2, binding = 8, std430) RESTRICT readonly buffer FaceNormalBuffer {
	vec4 normal[];
} B_face_normal;

layout(set = 2, binding = 9, std430) RESTRICT buffer FaceBackfacingBuffer {
	bool backfacing[];
} B_face_backfacing;

#endif // !MESH_BUFFERS_GLSLI
